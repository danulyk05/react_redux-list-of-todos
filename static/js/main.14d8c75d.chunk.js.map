{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","helper/filterTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","InitialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","filterBy","dispatch","visibleTodos","useMemo","title","toLowerCase","includes","completed","getVisibleTodos","length","className","map","id","classNames","onClick","currentTodoActions","setCurrentTodo","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","useEffect","userId","todoAction","href","email","name","App","isLoading","setIsLoading","resp","todosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14d8c75d.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeStatusAction = {\n  type: 'filter/Set',\n  payload: Status,\n};\n\ntype ChangeQueryAction = {\n  type: 'query/Set' | 'query/Clear',\n  payload: string;\n};\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst setStatus = (status: Status): ChangeStatusAction => ({\n  type: 'filter/Set',\n  payload: status,\n});\n\nconst setQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/Set',\n  payload: query,\n});\n\nconst clearQuery = (): ChangeQueryAction => ({\n  type: 'query/Clear',\n  payload: '',\n});\n\nconst InitialState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Actions = ChangeQueryAction | ChangeStatusAction;\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\nconst filterReducer = (\n  state: State = InitialState,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case ('filter/Set'):\n      return { ...state, status: action.payload };\n\n    case ('query/Set'):\n      return { ...state, query: action.payload };\n\n    case ('query/Clear'):\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype State = Todo[];\n\ntype SetTodosAction = {\n  type: 'todos/set',\n  payload: Todo[],\n};\n\ntype Actions = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/set',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = [],\n  action: Actions,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n      return action.payload;\n\n    default:\n      return state;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getVisibleTodos } from '../../helper/filterTodos';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const filterBy = useAppSelector(store => store.filter);\n  const currentTodo = useAppSelector(store => store.currentTodo);\n  const dispatch = useAppDispatch();\n  const visibleTodos = useMemo(() => getVisibleTodos(todos, filterBy), [filterBy]);\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {visibleTodos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={currentTodo?.id === todo.id\n                    ? 'has-background-info-light'\n                    : ''}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setCurrentTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': currentTodo?.id !== todo.id,\n                            'fa-eye-slash': currentTodo?.id === todo.id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\ntype Filters = {\n  status: Status,\n  query: string,\n};\n\nexport const getVisibleTodos = (todos: Todo[], filterBy: Filters): Todo[] => {\n  let visibleTodos = [...todos];\n\n  if (filterBy.query) {\n    visibleTodos = visibleTodos.filter((todo) => {\n      return todo.title.toLowerCase().includes(filterBy.query.toLowerCase());\n    });\n  }\n\n  if (filterBy.status) {\n    switch (filterBy.status) {\n      case 'active':\n        return visibleTodos.filter(todo => {\n          return !todo.completed;\n        });\n\n      case 'completed':\n        return visibleTodos.filter(todo => {\n          return todo.completed;\n        });\n\n      case 'all':\n      default:\n        return visibleTodos;\n    }\n  }\n\n  return visibleTodos;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(store => store.filter.status);\n  const query = useAppSelector(store => store.filter.query);\n\n  const changeSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const clearSearch = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  const changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span\n          className=\"select\"\n\n        >\n          <select\n            data-cy=\"statusSelect\"\n            onChange={changeStatus}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={changeSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as todoAction } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const closeModal = () => {\n    dispatch(todoAction.removeTodo());\n  };\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!todo || !user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((resp) => {\n        dispatch(todosActions.setTodos(resp));\n        setIsLoading(false);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList todos={todos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}